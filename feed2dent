#!/usr/bin/env python
"""
rss2dent is an RSS to identi.ca agent. It pulls feeds from a feed url, and 
posts the result to identi.ca. The link to the original feed article is
converted to a 'short url', and the title is chopped at 140 characters.
"""

import os
import sys
import pickle
import logging
import feedparser
import f2dlibs
from f2dlibs import Storage, cmdln, identica, FeedContainer, jfilters
from jinja2 import Environment
from ConfigParser import RawConfigParser
from optparse import OptionParser, OptionGroup

LOG_LEVELS = (logging.WARNING, logging.INFO, logging.DEBUG)
DEFAULT_TPL = '{{ url | shortenurl }} {{ title }}'

###
### class defs
class CommandParser(cmdln.Cmdln):
    name = "feed2dent"
    version = "0.2"

    def get_optparser(self):
        parser = cmdln.Cmdln.get_optparser(self)
        parser.add_option("-v", action="count", dest="verbosity", default=0,
            help="Set verbose logging. Additional instances add verbosity.")
        return parser

    def precmd(self, arg):
        if self.options.verbosity > len(LOG_LEVELS) - 1:
            verbosity = len(LOG_LEVELS) - 1
        else:
            verbosity = self.options.verbosity
        logging.basicConfig(
            format="%(asctime)s : %(levelname)-8s %(message)s",
            datefmt='%Y-%m-%d %H:%M',
            level=LOG_LEVELS[verbosity])
        self.logger = logging.getLogger('cmdparser')
        self.jenv = Environment()
        self.jenv.filters['shortenurl'] = jfilters.shortenurl
        return arg

    @cmdln.option("-f", "--fetch-only", action="store_true", dest="nodent",
        default=False, help="Fetch feeds but do post a dent.")
    def do_dent(self, subcmd, opts, *content):
        """Send the specified text directly to identi.ca, as a simple dent.

        usage: 
            dent CONTENT...

        ${cmd_option_list}
        """
        text = ' '.join(content).strip()
        if len(text) < 1:
            self.logger.critical('No content to post. Doing nothing.')
            return 1
        self.logger.debug('processing simple dent: "%s"', text)
        if opts.nodent == True:
            logger.debug('no-dent set. not sending...')
        else:
            identica.dent(config.identica, text)

    def do_list(self, subcmd, opts):
        """list feeds from the config file

        ${cmd_usage}
        ${cmd_option_list}
        """
        counter = 0
        for x in config.feeds:
            counter += 1
            print '[%2d] name: %s' % (counter, x)
            print '     url:  %s' % config.feeds[x]
            if x in config.templates:
                print '     tpl:  %s' % config.templates[x]
            else:
                print '     tpl:  %s' % DEFAULT_TPL


    @cmdln.option("-f", "--fetch-only", action="store_true", dest="nodent",
        default=False, help="Fetch feeds but do post a dent.")
    def do_feed(self, subcmd, opts, *feedname):
        """parse FEEDNAME(s) feed and post to identi.ca

        ${cmd_usage}
        If no FEEDNAME(s) provided, run for all feeds.

        ${cmd_option_list}
        """
        fc = loadfc()
        if len(feedname) > 0:
            for x in feedname:
                if x not in config.feeds.keys():
                    print 'feed name "%s" not in config.' % x
                else:
                    feedit(feed=x, nodent=opts.nodent)
        else:
            # remove feeds no longer in config
            if fc.loaded == True:
                for x in fc.feeds.keys():
                    if x not in config.feeds.keys():
                        self.logger.info('feed "%s" no longer in config.', x)
                        self.logger.info('deleting feed "%s".', x)
                        del fc.feeds[x]
            # operate on feeds
            for x in config.feeds.keys():
                if x in fc.feeds:
                    fc.feeds[x] = feedit(x, fobj=fc.feeds[x], nodent=opts.nodent)
                else:
                    fc.feeds[x] = feedit(x, fobj=None, nodent=opts.nodent)
            fc.save()


###
### helper function defs
def loadfc():
    logger = logging.getLogger('loadfc')
    fc = FeedContainer(config.general.dat_path)
    if os.path.isfile(config.general.dat_path):
        try:
            logger.debug('feed.dat found. trying to read.. %s', 
                         config.general.dat_path)
            fc.load()
            logger.debug('feed.dat loaded')
            return fc
        except:
            logger.error('could not read feed.dat, even though it exists.')
            logger.exception('exception:')
            sys.exit(1)
    else:
        logger.debug('no feed.dat found at %s.', config.general.dat_path)
        logger.debug('trying to create new dat file')
        return fc

def feedit(feedname, fobj=None, nodent=False):
    """Main entry point for rss2dent"""
    logger = logging.getLogger('main')
    # get rss feed
    try:
        logger.debug('fetching feed "%s"', feedname)
        if fobj:
            logger.debug('conditional fetch: modified date')
            newfobj = f2dlibs.timeout(10, feedparser.parse, 
                                      config.feeds[feedname], 
                                      modified=fobj.modified)
        else:
            newfobj = f2dlibs.timeout(10, feedparser.parse, 
                                      config.feeds[feedname])
    except f2dlibs.TimeoutError:
        logger.critical('timed out reading feed "%s". giving up', feedname)
        return fobj

    if not newfobj:
        logger.critical('feed "%s" was empty!', feedname)
        return fobj
    else:
        logger.debug('feed retrieved')

    if newfobj.status == 304:
        logger.info('no new feed data since last fetch')
        # return old object, preserving older last modified stamp
        return fobj

    ## start processing feed
    if nodent == True:
        # do nothing but return new object.
        logger.debug('no-dent set. not sending...')
        return newfobj
    else:
        posts_made = 0
        entries = newfobj.entries
        entries.reverse()
        # look for new feed items
        for entry in entries:
            match = False
            if fobj:
                for oldentry in fobj.entries:
                    if entry.id == oldentry.id:
                        match = True
            if match == False:
                if feedname in config.templates:
                    tplstring = config.templates[feedname]
                else:
                    tplstring = DEFAULT_TPL
                # new entry. do dent
                template = jenv.from_string(tplstring)
                text = template.render(url=entry.link, title=entry.title)
                # do dent
                identica.dent(config.identica, text)
                posts_made += 1
        if posts_made > 0:
            logger.info('posted %d dents')
        else:
            logger.info('no new feed data')
        # return new obj
        return newfobj

###
### load config vars
cfgp = RawConfigParser()
cfgp.read('config.ini')
config = Storage()
for section in cfgp.sections():
    config[section] = Storage()
    for left,right in cfgp.items(section):
        config[section][left] = right

###
### main
if __name__ == '__main__':
    feed2dent = CommandParser()
    ret = feed2dent.main()
    sys.exit(ret)

