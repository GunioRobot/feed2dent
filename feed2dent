#!/usr/bin/env python
"""
rss2dent is an RSS to identi.ca agent. It pulls feeds from a feed url, and 
posts the result to identi.ca. The link to the original feed article is
converted to a 'short url', and the title is chopped at 140 characters.
----
usage: %prog [options]
 --no-dent  : Fetch RSS but do not post results to identi.ca. Useful when 
              you want to only update the feed data file.
 -h, --help : Print help
 --version  : Print version
"""

import os
import sys
import pickle
import logging
import feedparser
import f2dlibs
from f2dlibs import Storage, cmdln, identica, tighturl
from ConfigParser import RawConfigParser
from optparse import OptionParser, OptionGroup

LOG_LEVELS = (logging.WARNING, logging.INFO, logging.DEBUG)

class CommandParser(cmdln.Cmdln):
    name = "feed2dent"
    version = "0.1"

    def get_optparser(self):
        parser = cmdln.Cmdln.get_optparser(self)
        parser.add_option("-v", action="count", dest="verbosity", default=0,
            help="Set verbose logging. Additional instances add verbosity.")
        return parser

    def do_version(self, subcmd, opts):
        """print version"""
        print "%s %s" % (self.name, self.version)

    def precmd(self, arg):
        if self.options.verbosity > len(LOG_LEVELS) - 1:
            verbosity = len(LOG_LEVELS) - 1
        else:
            verbosity = self.options.verbosity
        logging.basicConfig(
            format="%(asctime)s : %(levelname)-8s %(message)s",
            datefmt='%Y-%m-%d %H:%M',
            level=LOG_LEVELS[verbosity])
        self.logger = logging.getLogger('cmdparser')
        return arg

    @cmdln.option("--no-dent", action="store_true", dest="nodent",
        help="Fetch RSS but do post a dent.")
    def do_dent(self, subcmd, opts, *content):
        """Send the specified text directly to identi.ca, as a simple dent.

        usage: 
            dent CONTENT...

        ${cmd_option_list}
        """
        text = ' '.join(content).strip()
        if len(text) < 1:
            self.logger.critical('No content to post. Doing nothing.')
            return 1
        self.logger.debug('processing simple dent: "%s"', text)
        if nodent == True:
            logger.debug('no-dent set. not sending...')
        else:
            identica.dent(config.identica, text)

    @cmdln.option("--no-dent", action="store_true", dest="nodent",
        help="Fetch RSS but do post a dent.")
    def do_feed(self, subcmd, opts, feedname):
        """parse FEEDNAME feed and post to identi.ca

        ${cmd_usage}
        ${cmd_option_list}
        """
        feedit(nodent=opts.nodent)


###
### Start control logic
def feedit(nodent=False):
    """Main entry point for rss2dent"""
    logger = logging.getLogger('main')
    if os.path.isfile(config.general.dat_path):
        try:
            logger.debug('feed.dat found. trying to read.. %s', 
                         config.general.dat_path)
            f = open(config.general.dat_path, 'rb')
            odata = pickle.load(f)
            f.close()
            logger.debug('feed.dat loaded')
        except:
            logger.error('could not read feed.dat, even though it exists.')
            logger.exception('exception:')
            sys.exit(1)
    else:
        logger.debug('no feed.dat found at %s.', config.general.dat_path)
        odata = None

    # get rss feed
    try:
        logger.debug('fetching feed url')
        if odata:
            logger.debug('conditional fetch: modified date')
            fdata = f2dlibs.timeout(10, feedparser.parse, 
                                    config.general.feed_url, 
                                    modified=odata.modified)
        else:
            fdata = f2dlibs.timeout(10, feedparser.parse, 
                                    config.general.feed_url)
    except f2dlibs.TimeoutError:
        logger.critical('timed out reading feed. giving up')
        sys.exit(1)

    if not fdata:
        logger.critical('feed was empty!')
        sys.exit(1)
    else:
        logger.debug('feed retrieved')

    if fdata.status == 304:
        logger.info('no new feed data since last fetch')
        # no sense overriting the file, since we know it isn't new yet
        # preserves last-mod-timestamp
        return
    elif nodent == True:
        logger.debug('no-dent set. not sending...')
    else:
        posts_made = 0
        entries = fdata.entries
        entries.reverse()
        # look for new feed items
        for entry in entries:
            match = False
            if odata:
                for oldentry in odata.entries:
                    if entry.id == oldentry.id:
                        match = True
            if match == False:
                # new entry. do dent
                text = '%s %s' % (
                    tighturl.ify(config.tighturl, entry.link), 
                    entry.title)
                # do dent
                identica.dent(config.identica, text)
                posts_made += 1
        if posts_made > 0:
            logger.info('posted %d dents')
        else:
            logger.info('no new feed data')

    # save feed data
    try:
        logging.debug('saving feed.dat to %s', config.general.dat_path)
        f = open(config.general.dat_path, 'wb')
        pickle.dump(fdata, f)
        f.close()
        logging.debug('feed.dat saved')
    except:
        logger.critical('could not save feed.dat.')
        logger.exception('exception: ')


## load config vars
cfgp = RawConfigParser()
cfgp.read('config.ini')
config = Storage()
for section in cfgp.sections():
    config[section] = Storage()
    for left,right in cfgp.items(section):
        config[section][left] = right

if __name__ == '__main__':
    feed2dent = CommandParser()
    ret = feed2dent.main()
    sys.exit(ret)

